---
import { Image } from "astro:assets";
import type { Photo } from "../types/photos";

export interface Props {
  photos: Array<Photo>;
  randomize?: boolean; // whether to randomize the order of photos on load
}

const { photos, randomize = false } = Astro.props;
---

<div class="carousel-gallery w-full aspect-[4/5] md:aspect-[3/2] lg:aspect-[16/9] xl:aspect-[16/8] 2xl:aspect-[22/9] max-h-[85vh]">
  <div class="swiper showcase-swiper h-full" data-randomize={randomize}>
    <div class="swiper-wrapper">
      {
        photos?.map(async (photo: Photo, index: number) => {
          const fileName = photo.src.src.split("/").pop();

          return (
            <div class="swiper-slide flex items-center justify-center">
              <a
                class="relative flex items-center justify-center w-full h-full"
                data-umami-event="Carousel photo click"
                data-umami-event-photo-id={fileName}
              >
                <Image
                  class="object-contain drop-shadow-xl max-h-full max-w-full"
                  src={photo.src}
                  decoding="async"
                  loading={index === 0 ? "eager" : "lazy"}
                  alt={photo.alt}
                  widths={[400, 700, 900, 1400, 1800]}
                  quality={"high"}
                />
              </a>
            </div>
          );
        })
      }
    </div>

    <!-- Navigation Controls -->
    <div class="navigation-controls hidden lg:flex">
      <!-- Previous Button -->
      <div
        class="swiper-button-prev nav-arrow"
        aria-label="Previous image"
      >
        <svg
          class="arrow-icon"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"
          ></path>
        </svg>
      </div>

      <!-- Next Button -->
      <div
        class="swiper-button-next nav-arrow"
        aria-label="Next image"
      >
        <svg
          class="arrow-icon"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5l7 7-7 7"
          ></path>
        </svg>
      </div>
    </div>
  </div>
</div>

<script>
  import Swiper from "swiper";
import "swiper/css";
import "swiper/css/effect-fade";
import "swiper/css/navigation";
import "swiper/css/pagination";
import { Autoplay, EffectFade, Keyboard, Navigation } from "swiper/modules";

  const shuffleArray = (array: any[]) => {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
  };

  const shuffleSlides = (swiperContainer: HTMLElement) => {
    const wrapper = swiperContainer.querySelector('.swiper-wrapper');
    const slides = Array.from(wrapper?.children || []);
    
    // Shuffle the slides array
    shuffleArray(slides);
    
    // Remove all slides and re-append in new order
    slides.forEach(slide => wrapper?.removeChild(slide));
    slides.forEach(slide => wrapper?.appendChild(slide));
  };

  let swiperInstance: any = null;

  const initSwiper = () => {
    
    // Destroy existing swiper instance if it exists
    if (swiperInstance) {
      swiperInstance.destroy(true, true);
      swiperInstance = null;
    }
    
    const swiperContainer = document.querySelector(".showcase-swiper") as HTMLElement;
    if (!swiperContainer) return;
    
    const shouldRandomize = swiperContainer?.dataset.randomize === 'true';
    
    // Randomize slides before initializing swiper if requested
    if (shouldRandomize && swiperContainer) {
      shuffleSlides(swiperContainer);
    }
    
    const counterEl = document.querySelector(".current-slide");

    swiperInstance = new Swiper(".showcase-swiper", {
      modules: [EffectFade, Navigation, Autoplay, Keyboard],
      effect: "fade",
      fadeEffect: {
        crossFade: true,
      },
      speed: 1500,
      allowTouchMove: true,
      loop: true,
      autoplay: {
        delay: 8000,
        disableOnInteraction: true,
      },
      navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev",
      },
      keyboard: {
        enabled: true,
      },
      on: {
        slideChange: function (swiper) {
          if (counterEl) {
            counterEl.textContent = (swiper.realIndex + 1).toString();
          }
        },
      },
    });
  };

  // Initialize swiper on page load and after view transitions
  document.addEventListener("astro:page-load", initSwiper);
  
  // Also initialize on DOMContentLoaded for compatibility
  document.addEventListener("DOMContentLoaded", initSwiper);
  
  // Re-initialize on window load for better compatibility
  window.addEventListener("load", initSwiper);
</script>


<style>
  /* Hide default swiper navigation arrows */
  :root {
    --swiper-navigation-size: 0;
  }

  .swiper-button-next::after,
  .swiper-button-prev::after {
    display: none;
  }

  /* Navigation Controls Styling */
  .navigation-controls {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 10;
  }

  .nav-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 20;
    background-color: rgba(255, 255, 255, 0.3);
    backdrop-filter: blur(4px);
    border-radius: 50%;
    min-width: 48px;
    min-height: 48px;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    pointer-events: auto;
    padding: 0;
    box-sizing: border-box;
    overflow: hidden;
    cursor: pointer;
  }

  .nav-arrow:hover {
    background-color: rgba(255, 255, 255, 0.5);
  }

  .swiper-button-prev {
    left: 2rem;
  }

  .swiper-button-next {
    right: 2rem;
  }

  .arrow-icon {
    width: 24px;
    height: 24px;
    color: #262626;
    flex-shrink: 0;
  }

  /* Responsive adjustments */
  @media (max-width: 1024px) {
    .nav-arrow {
      min-width: 44px;
      min-height: 44px;
      width: 44px;
      height: 44px;
    }
    
    .arrow-icon {
      width: 20px;
      height: 20px;
    }
  }

  @media (max-width: 768px) {
    .nav-arrow {
      display: none !important;
      visibility: hidden;
      opacity: 0;
      pointer-events: none;
    }
  }

  @media (min-width: 640px) and (max-width: 768px) {
    .swiper-button-prev {
      left: 1.5rem;
    }

    .swiper-button-next {
      right: 1.5rem;
    }
  }

  /* Animation for image loading */
  .swiper-slide img {
    animation: fadeInScale 0.6s ease-out;
  }

  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(0.95);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Ensure swiper container preserves aspect ratio */
  .swiper {
    height: 100% !important;
    width: 100% !important;
  }

  .swiper-wrapper {
    height: 100% !important;
  }

  .swiper-slide {
    height: 100% !important;
    display: flex !important;
    align-items: center;
    justify-content: center;
  }
</style>
